vJSCC_DB['ClassList']['Wiki2HTML'] = {
    "JSCC_type": "CLASS",
    "JSCC_init_date": "21.1.2018",
    "JSCC_mod_date": "2018/01/21 17:24:09",
    "tClassname": "Wiki2HTML",
    "tSuperClassname": "",
    "sClassType": "Default",
    "tAuthor": "Engelbert Niehaus",
    "tEMail": "niehaus@uni-landau.de",
    "tAttributes": "aProjectDir = \"demo/my_article\"\naRemoteMedia = true",
    "tMethods": "parse(wikicode:String):String\ndeleteCR(wikicode:String):String\nheaders(wikicode:String):String\nhorizontalRule(wikicode:String):String\ninlineElement(wikicode:String):String\nlist(wikicode:String):String\ntable(wikicode:String):String\nparagraph(wikicode:String):String\nmath2jax(wikicode:String,pFormat:String):String\ntoc(wikicode:String):String\nconvertWiki2Local(pContent:String,pWikiJSON:Hash):String\nconvertWikiMedia2URL(pMediaLink:String):String\ndownloadWikiMedia(pMediaArray:Array)\nparseWiki4Media(pWikiText:String):Array\ncreateMediaWikiJSON(vMediaArray:Array,pWikiJSON:Hash)\ncheckWikiJSON(pWikiJSON:Hash,pHashID:String)\ngetMediaSubDir(pMediaLink:String)\ngetWikiLinks(pWikiText:String):String\nconvertWikiMedia2File(pMediaLink:String):String\ndownloadMediaFile(pMediaLink:String)\nconvertMediaLink4Wiki(pContent:String,pMediaArray:Array):String\nreplaceString(pString:String,pSearch:String,pReplace:String):String\nreplaceWikiLinks(pWikiText:String,pWikiJSON:Hash):String\nconvertWiki2Online(pContent:String):String\nconvertMediaLink4WikiOnline(pContent:String,pMediaArray:Array):String",
    "sAttribList": "aRemoteMedia",
    "tAttribName": "",
    "tAttribType": "",
    "tAttribComment": "",
    "tAttribDefault": "",
    "sAttribTypeList": "",
    "tMethodHeader": "convertWiki2Online(pContent:String):String",
    "tMethodName": "",
    "tMethodComment": "convertWiki2Online(pContent) converts the Links and Media in way so that media and links \nare referenced to online resource to the server",
    "sMethodList": "convertWiki2Online",
    "tMethodCode": "  var vMediaArray = this.parseWiki4Media(pContent);\n  // this.downloadWikiMedia(vMediaArray);\n  pContent = this.convertMediaLink4WikiOnline(pContent,vMediaArray);\n  pContent = this.replaceWikiLinks(pContent);\n  return pContent;",
    "tLoopObject": "",
    "tLoopMethod": "",
    "AttribType": {
        "aProjectDir": "String",
        "aRemoteMedia": "Boolean"
    },
    "AttribAccess": {
        "aProjectDir": "public",
        "aRemoteMedia": "public"
    },
    "AttribDefault": {
        "aProjectDir": "\"demo/my_article\"",
        "aRemoteMedia": "true"
    },
    "AttribComment": {
        "aProjectDir": "the attribute 'aProjectDir' stores in 'String' the relative path in the PanDoc root directory",
        "aRemoteMedia": "the attribute 'aRemoteMedia' stores in 'Boolean' variable if the MediaLinks are stored in the local file system of referenced to remote Media Server"
    },
    "MethodParameter": {
        "parse": "wikicode:String",
        "deleteCR": "wikicode:String",
        "headers": "wikicode:String",
        "horizontalRule": "wikicode:String",
        "inlineElement": "wikicode:String",
        "list": "wikicode:String",
        "table": "wikicode:String",
        "paragraph": "wikicode:String",
        "math2jax": "wikicode:String,pFormat:String",
        "toc": "wikicode:String",
        "convertWiki2Local": "pContent:String,pWikiJSON:Hash",
        "parseWiki4Media": "pWikiText:String",
        "createMediaWikiJSON": "vMediaArray:Array,pWikiJSON:Hash",
        "checkWikiJSON": "pWikiJSON:Hash,pHashID:String",
        "getMediaSubDir": "pMediaLink:String",
        "convertWikiMedia2File": "pMediaLink:String",
        "convertWikiMedia2URL": "pMediaLink:String",
        "downloadWikiMedia": "pMediaArray:Array",
        "downloadMediaFile": "pMediaLink:String",
        "convertMediaLink4Wiki": "pContent:String,pMediaArray:Array",
        "replaceString": "pString:String,pSearch:String,pReplace:String",
        "convertWiki2Online": "pContent:String",
        "replaceWikiLinks": "pWikiText:String,pWikiJSON:Hash",
        "getWikiLinks": "pWikiText:String",
        "convertMediaLink4WikiOnline": "pContent:String,pMediaArray:Array"
    },
    "MethodReturn": {
        "parse": "String",
        "deleteCR": "String",
        "headers": "String",
        "horizontalRule": "String",
        "inlineElement": "String",
        "list": "String",
        "table": "String",
        "paragraph": "String",
        "math2jax": "String",
        "toc": "String",
        "convertWiki2Local": "String",
        "parseWiki4Media": "Array",
        "createMediaWikiJSON": "",
        "checkWikiJSON": "",
        "getMediaSubDir": "",
        "convertWikiMedia2File": "String",
        "convertWikiMedia2URL": "String",
        "downloadWikiMedia": "",
        "downloadMediaFile": "",
        "convertMediaLink4Wiki": "String",
        "replaceString": "String",
        "convertWiki2Online": "String",
        "replaceWikiLinks": "String",
        "getWikiLinks": "String",
        "convertMediaLink4WikiOnline": "String"
    },
    "MethodCode": {
        "parse": "\t/*\n\tThis Library was created with JavascriptClassCreator \n\thttps://niebert.github.io/JavascriptClassCreator\n\tThe library is based on  wiki2HTML library of Elia Contini\n\tpublised under GPL.\n\tParses wiki markup and generates HTML 5 showing a preview.\n    Copyright (C) 2010-2013 Elia Contini\n    \n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    any later version.\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    \n    You should have received a copy of the GNU General Public License\n    along with this program. If not, see http://www.gnu.org/licenses/.\n */\n\n// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n\n\t\tvar html = '<p>function wiki2html(wikicode): an error occurs</p>';\n\t\t\n\t\twikicode = this.deleteCR(wikicode);\n\t\twikicode = this.math2jax(wikicode,\"reveal\");\n\t\twikicode = this.headers(wikicode);\n\t\twikicode = this.horizontalRule(wikicode);\n\t\twikicode = this.inlineElement(wikicode);\n\t\twikicode = this.list(wikicode);\n\t\twikicode = this.table(wikicode);\n\t\twikicode = this.paragraph(wikicode);\n\t\twikicode = this.toc(wikicode);\n\t\t\n\t\thtml = wikicode;\n\t\t\n\t\treturn html;",
        "deleteCR": "wikicode = wikicode.replace(/\\r/g, '');\nreturn wikicode;",
        "headers": "\t    var heading_1_regEx = /^=[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?=/gm;\n\t\tvar heading_2_regEx = /^==[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?==/gm;\n\t\tvar heading_3_regEx = /^===[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?===/gm;\n\t\tvar heading_4_regEx = /^====[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?====/gm;\n\t\tvar heading_5_regEx = /^=====[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?=====/gm;\n\t\tvar heading_6_regEx = /^======[\\s]*?([0-9A-Za-z].[^=\\[]*)[\\s]*?======/gm;\n\t\t\n\t\twikicode = wikicode.replace(heading_6_regEx, '<h6>$1</h6>');\n\t\twikicode = wikicode.replace(heading_5_regEx, '<h5>$1</h5>');\n\t\twikicode = wikicode.replace(heading_4_regEx, '<h4>$1</h4>');\n\t\twikicode = wikicode.replace(heading_3_regEx, '<h3>$1</h3>');\n\t\twikicode = wikicode.replace(heading_2_regEx, '<h2>$1</h2>');\n\t\twikicode = wikicode.replace(heading_1_regEx, '<h1>$1</h1>');\n\t\t\n\t\treturn wikicode;",
        "horizontalRule": "\tvar horizontalLine = /----/g;\n\t\t\n\twikicode = wikicode.replace(horizontalLine, '<hr>');\n\t\t\n\treturn wikicode;",
        "inlineElement": "\t\tvar strongEm = /'''''([0-9A-Za-z].*)'''''/g;\n\t\tvar strong = /'''([0-9A-Za-z].*)'''/g;\n\t\tvar em = /''([0-9A-Za-z].*)''/g;\n\t\tvar image = /\\[\\[File:(.[^\\]|]*)([|]thumb|frame)?([|]alt=.[^\\]|]*)?([|].[^\\]|]*)?\\]\\]/g;\n\t\tvar anchor = /\\[([a-zA-Z0-9].[^\\s]*) ([a-zA-Z0-9].[^\\]]*)\\]/g;\n\t\n\t\twikicode = wikicode.replace(strongEm, '<strong><em>$1</em></strong>');\n\t\twikicode = wikicode.replace(strong, '<strong>$1</strong>');\n\t\twikicode = wikicode.replace(em, '<em>$1</em>');\n\t\n\t\twhile(tokens = image.exec(wikicode)) {\n\t\t\tif(tokens.length == 5 &&\n\t\t\t\ttypeof(tokens[2]) != 'undefined' &&\n\t\t\t\ttypeof(tokens[3]) != 'undefined' &&\n\t\t\t\ttypeof(tokens[4]) != 'undefined') {\n\t\t\t\ttokens[2] = tokens[2].replace('|', '');\n\t\t\t\ttokens[3] = tokens[3].replace('|alt=', '');\n\t\t\t\ttokens[4] = tokens[4].replace('|', '');\n\t\t\t\twikicode = wikicode.replace(tokens[0], '<figure class=\"' + tokens[2] + '\"><img src=\"' + tokens[1] + '\" class=\"' + tokens[2] + '\" alt=\"' + tokens[3] + '\"><figcaption>' + tokens[4] + '</figcaption></figure>');\n\t\t\t}\n\t\t\telse\n\t\t\t\twikicode = wikicode.replace(tokens[0], '<div class=\"warning\">WARNING: your image code is incomplete. Good practices for images impose to specify an alternative text, a caption and if the image is a frame or a thumbnail. For example, <code>&#091;&#091;File:anImage.png|thumb|alt=Alternative text|Caption text&#093;&#093;</code></div>');\n\t\t}\n\t\n\t\twikicode = wikicode.replace(anchor, '<a href=\"$1\">$2</a>');\n\t\t\n\t\treturn wikicode;",
        "list": "\t// unordered\n\t\tvar unorderedStartList = /\\n\\n<li>/gm; //|\\r\\n\\r\\n<li>\n\t\tvar unorderedListItem = /^\\*(.*)/gm;\n\t\tvar unorderedEndList = /<\\/li>\\n(?!<li>)/gm; // |<\\/li>\\r\\n(?!<li>)\n\t\t\n\t\twikicode = wikicode.replace(unorderedListItem, '<li>$1</li>');\t\n\t\twikicode = wikicode.replace(unorderedStartList, \"\\n<ul>\\n<li>\");\n\t\twikicode = wikicode.replace(unorderedEndList, \"</li>\\n</ul>\\n\\n\");\n\t\t\n\t\t// ordered\n\t\tvar orderedStartList = /\\n\\n<li>/gm; // |\\r\\n\\r\\n<li> ///([^<\\/li>][>]?[\\n])<li>/g;\n\t\tvar orderedListItem = /^#[:]?[#]* (.*)/gm;\n\t\tvar orderedEndList = /<\\/li>\\n(?!<li>|<\\/ul>)/gm; // |<\\/li>\\r\\n(?!<li>|<\\/ul>) ///<\\/li>\\n(?!<li>)/gm;\n\t\t\n\t\twikicode = wikicode.replace(orderedListItem, '<li>$1</li>');\n\t\twikicode = wikicode.replace(orderedStartList, \"\\n<ol>\\n<li>\");\n\t\twikicode = wikicode.replace(orderedEndList, \"</li>\\n</ol>\\n\\n\");\n\t\t\n\t\treturn wikicode;",
        "table": "\t\t// http://www.mediawiki.org/wiki/Help:Tables\n\t\tvar tableStart = /^\\{\\|/gm;\n\t\tvar tableRow = /^\\|-/gm;\n\t\tvar tableHeader = /^!\\s(.*)/gm;\n\t\tvar tableData = /^\\|\\s(.*)/gm;\n\t\tvar tableEnd = /^\\|\\}/gm;\n\t\n\t\twikicode = wikicode.replace(tableStart, '<table><tr>');\n\t\twikicode = wikicode.replace(tableRow, '</tr><tr>');\n\t\twikicode = wikicode.replace(tableHeader, '<th>$1</th>');\n\t\twikicode = wikicode.replace(tableData, '<td>$1</td>');\n\t\twikicode = wikicode.replace(tableEnd, '</tr></table>');\n\t\t\n\t\treturn wikicode;",
        "paragraph": "\t\tvar paragraph = /\\n\\n([^#\\*=].*)/gm; //|\\r\\n\\r\\n([^#\\*=].*)\n\t\t\n\t\twikicode = wikicode.replace(paragraph, \"\\n<p>$1</p>\\n\");\n\t\t\n\t\treturn wikicode;",
        "math2jax": "return wikicode;",
        "toc": "\tvar toc = /^__TOC__/g;\n\t\t\n\twikicode = wikicode.replace(toc, '');\n\t\t\n\treturn wikicode;",
        "convertWiki2Local": "  var vMediaArray = this.parseWiki4Media(pContent);\n  this.createMediaWikiJSON(vMediaArray,pWikiJSON);\n  this.downloadWikiMedia(vMediaArray);\n  pContent = this.convertMediaLink4Wiki(pContent,vMediaArray);\n  pContent = this.replaceWikiLinks(pContent,pWikiJSON);\n  return pContent;",
        "parseWiki4Media": "  var vMediaArray = [];\n  //var vSearch = /\\[(File|Datei|Image):([^\\|]*)/;\n  var vSearch = /\\[(?:File|Image|Datei):([^\\|\\]]+)/g;\n  // \\[            # \"[\"\n  // (?:            # non-capturing group\n  //  File|Image|Datei        #   \"File\" or \"Image\" or \"Datei\"\n  // )              # end non-capturing group\n  //:             # \":\"\n  //(              # group 1\n  //  [^\\|]+      #   any character except \"|\" or \"]\" at least once\n  // )              # end group 1 - this will be the image's name\n  var vResult;\n  var vCount =0;\n  while (vResult = vSearch.exec(pWikiText)) {\n    vCount++;\n    vMediaArray.push(vResult[1]);\n    console.log(\"Media \"+vCount+\": '\" + vResult[1] + \"' found\");\n  };\n  return vMediaArray;",
        "createMediaWikiJSON": "  var vMediaFile = \"\";\n  var vSubDir = \"\";\n  var vLocalID = \"\";\n  this.checkWikiJSON(pWikiJSON,\"media\");\n  for (var i = 0; i < pMediaArray.length; i++) {\n    vSubDir = this.getMediaSubDir(pMediaArray[i]);\n    vMediaFile = this.convertWikiMedia2File(pMediaArray[i]);\n    vLocalID = vSubDir + \"/\" + vMediaFile\n    //pWikiJSON[vMediaArray[i]] = vLocalID;\n    pWikiJSON[\"media\"][vLocalID] = pMediaArray[i];\n  };",
        "checkWikiJSON": "  var vMediaFile = \"\";\n  var vSubDir = \"\";\n  var vLocalID = \"\";\n  this.checkWikiJSON(pWikiJSON,\"media\");\n  for (var i = 0; i < pMediaArray.length; i++) {\n    vSubDir = this.getMediaSubDir(pMediaArray[i]);\n    vMediaFile = convertWikiMedia2File(pMediaArray[i]);\n    vLocalID = vSubDir + \"/\" + vMediaFile\n    //pWikiJSON[vMediaArray[i]] = vLocalID;\n    pWikiJSON[\"media\"][vLocalID] = pMediaArray[i];\n  };",
        "getMediaSubDir": "  var vMediaFile = \"\";\n  var vSubDir = \"\";\n  var vLocalID = \"\";\n  this.checkWikiJSON(pWikiJSON,\"media\");\n  for (var i = 0; i < pMediaArray.length; i++) {\n    vSubDir = this.getMediaSubDir(pMediaArray[i]);\n    vMediaFile = this.convertWikiMedia2File(pMediaArray[i]);\n    vLocalID = vSubDir + \"/\" + vMediaFile\n    //pWikiJSON[vMediaArray[i]] = vLocalID;\n    pWikiJSON[\"media\"][vLocalID] = pMediaArray[i];\n  };",
        "convertWikiMedia2File": "  var vMediaArray = this.parseWiki4Media(pContent);\n  this.createMediaWikiJSON(vMediaArray,pWikiJSON);\n  this.downloadWikiMedia(vMediaArray);\n  pContent = convertMediaLink4Wiki(pContent,vMediaArray);\n  pContent = replaceWikiLinks(pContent,pWikiJSON);\n  return pContent;",
        "convertWikiMedia2URL": "  pMediaLink = pMediaLink.replace(/[ \\t]+$/,\"\");\n  pMediaLink = pMediaLink.replace(/ /g,\"_\");\n  //console.log(\"MediaLink: '\"+pMediaLink+\"'\");\n  return pMediaLink;",
        "downloadWikiMedia": "  for (var i = 0; i < pMediaArray.length; i++) {\n    this.downloadkMediaFile(pMediaArray[i]);\n  };",
        "downloadMediaFile": " console.log(\"Download Media File '\"+pMediaLink+\"' to folder '\"+this.aProjectDir+\"' not implemented yet\");",
        "convertMediaLink4Wiki": "  var vReplaceLink;\n  var vMediaFile;\n  var vSubDir;\n\n  pWikiText = pWikiText.replace(/\\[(File|Image|Datei):/gi,\"[File:\");\n\n  for (var i = 0; i < pMediaArray.length; i++) {\n    vSubDir = this.getMediaSubDir(pMediaArray[i]);\n    vMediaFile = this.convertWikiMedia2File(pMediaArray[i]);\n    vReplaceLink = vSubDir + \"/\" + vMediaFile;\n    pWikiText = this.replaceString(pWikiText,\"File:\"+pMediaArray[i],\"File:\"+vReplaceLink);\n  };\n  return pWikiText;",
        "replaceString": "\t//alert(\"cstring.js - replaceString() \"+pString);\n\tif (!pString) {\n\t\talert(\"replaceString()-Call - pString not defined!\");\n\t} else if (pString != '') {\n    {\n  \t//alert(\"cstring.js - replaceString() \"+pString);\n  \t\tvar vHelpString = '';\n      var vN = pString.indexOf(pSearch);\n  \t\tvar vReturnString = '';\n  \t\twhile (vN >= 0)\n  \t\t{\n  \t\t\tif (vN > 0)\n  \t\t\t\tvReturnString += pString.substring(0, vN);\n  \t\t\tvReturnString += pReplace;\n              if (vN + pSearch.length < pString.length) {\n  \t\t\t\tpString = pString.substring(vN+pSearch.length, pString.length);\n  \t\t\t} else {\n  \t\t\t\tpString = ''\n  \t\t\t}\n  \t\t\tvN = pString.indexOf(pSearch);\n  \t\t};\n  \t};\n  \treturn vReturnString + pString;",
        "convertWiki2Online": "  var vMediaArray = this.parseWiki4Media(pContent);\n  // this.downloadWikiMedia(vMediaArray);\n  pContent = this.convertMediaLink4WikiOnline(pContent,vMediaArray);\n  pContent = this.replaceWikiLinks(pContent);\n  return pContent;",
        "replaceWikiLinks": "  var vLinkArray = this.getWikiLinks(pWikiText);\n  var vURL,Title,vLink,vLocalLink;\n  var vPipePos = 0;\n  this.checkWikiJSON(pWikiJSON,\"links\");\n  for (var i = 0; i < vLinkArray.length; i++) {\n    vLink = vLinkArray[i];\n    vPipePos = vLink.indexOf(\"|\");\n    if (vPipePos>0) {\n      vURL = vLink.substr(0,vPipePos);\n      vTitle = vLink.substr(vPipePos+1,vLink.length);\n    } else {\n      vURL = vLink;\n      vTitle = vLink;\n    };\n    vURL = this.getWikiDisplayURL(vURL);\n    vLocalLink = vURL+\" \"+vTitle;\n    pWikiText = this.replaceString(pWikiText,\"[[\"+vLink+\"]]\",\"[\"+vLocalLink+\"]\");\n    // for reverse replacement to online Wikipedia or Wikiversity store replacement in WikiJSON\n    pWikiJSON[\"links\"][vLocalLink] = \"[\"+vLink+\"]\";\n  };\n  return pWikiText",
        "getWikiLinks": "  // Wiki Links are open with \"\"\n  var vLinkArray = [];\n  //var vSearch = /\\[(File|Datei|Image):([^\\|]*)/;\n  var vSearch = /\\[\\[([^\\[\\]\\:]+)\\]\\]/g;\n  // \\[\\[         # \"[[\"\n  //(             # group 1\n  //  [^\\[\\]]+    #   any character except \"[\" and \"]\" \":\" at least once\n  // )            # end group 1 - this will be the image's name\n  // \\]\\]         # \"]]\"\n  var vResult;\n  var vCount =0;\n  while (vResult = vSearch.exec(pWikiText)) {\n    vCount++;\n    vLinkArray.push(vResult[1]);\n    console.log(\"Wiki-Link \"+vCount+\": '\" + vResult[1] + \"' found\");\n  };\n  return vLinkArray;",
        "convertMediaLink4WikiOnline": "  var vReplaceLink;\n  var vMediaFile;\n  var vPathArray;\n\n  pWikiText = pWikiText.replace(/\\[(File|Image|Datei):/gi,\"[File:\");\n\n  for (var i = 0; i < pMediaArray.length; i++) {\n    vPathArray = (pMediaArray[i]).split(\"/\");\n    vMediaFile = vPathArray[vPathArray.length-1];\n    var vFileSplit = vMediaFile.split(\"|\");\n    vMediaFile = vFileSplit[0];\n    vReplaceLink = vMediaFile + \"|mini|\" + vMediaFile;\n    pWikiText = this.replaceString(pWikiText,\"File:\"+pMediaArray[i],\"File:\"+vReplaceLink);\n  };\n  return pWikiText;"
    },
    "MethodComment": {
        "parse": "parses the MediaWiki code in argument and returns a HTML string",
        "deleteCR": "deleteCR(wikicode) normalizes line breaks in order to have a common base string for all browsers.\ndeleteCR() uses the MediaWiki source code `wikicode` from the parameter of the function and returns a HTML string \nafter removing all CRs.",
        "headers": "Convert all headers in Wiki source code",
        "horizontalRule": "Convert the  horizontal rules in Wiki source code",
        "inlineElement": "Convert for inline elements of the Wiki source code",
        "list": "Convert orderd and unorderd list in the Wiki Source code",
        "table": "Convert the table from WikiSource code in HTML",
        "paragraph": "Convert all paragraphs in the Wiki source code",
        "math2jax": "Convert the MATH-tag to a MathJax compatible HTML enviroment dependent of the pFormat of the parameter of math2jax.\npFormat = 'reveal' 'html' are possible formats",
        "toc": "Convert the table of contents from Wiki source code into HTML",
        "convertWiki2Local": "convertWiki2Local() replaces the MediaWiki internal links to links that work in a local HTML file. The parsed vMediaWiki Links ",
        "parseWiki4Media": "parseWiki4Media() the pWikiText and extract the Media and File links.",
        "createMediaWikiJSON": "createMediaWikiJSON(vMediaArray:Array,pWikiJSON:Hash) creates in pWikiJSON[\"media\"]={} a Hash \nthat maps the local file path 'image/my_image.png' to the replace path \npWikiJSON[\"media\"][\"image/my_image.png\"] = \"https://commons.wikimedia.org/wiki/my_image.png\" ",
        "checkWikiJSON": "checkWikiJSON() checks if the File Link definitions exists in the pWikiHash[\"media\"]",
        "getMediaSubDir": "getMediaSubDir(pMediaLink) return for a pMediaLink the appropriate subdirectory.",
        "convertWikiMedia2File": "convertWikiMedia2File(pMediaLink) converts the pMediaLink into an URL and returns the media link.\nremoves blanks at the tail and replaces blanks with and underscore \"_\"\nand non-alpha-numerical characters with an underscore, so that finally the filename works fine on all file systems",
        "convertWikiMedia2URL": "convertWikiMedia2URL(pMediaLink) removes blanks at the tail and replaces blanks with and underscore \"_\"",
        "downloadWikiMedia": "downloadWikiMedia(pMediaArray:Array) download the images to level-fs \nthat can be exported as ZIP-file with archiver NPM module",
        "downloadMediaFile": "downloadMediaFile(pMediaFile) from WikiMedia Commons to the local filesystem emulated with level-fs",
        "convertMediaLink4Wiki": "convertMediaLink4Wiki(pContent,pMediaWiki) convert the link \n- [[File:MyFile.png....   with \n- [File:https://commons.wikimedia.org/.../MyFile.png",
        "replaceString": "replaceString(pString,pSearch,pReplace) replaces globally pSearch by pReplace and returns the modified string",
        "convertWiki2Online": "convertWiki2Online(pContent) converts the Links and Media in way so that media and links \nare referenced to online resource to the server",
        "replaceWikiLinks": "Comment for replaceWikiLinks",
        "getWikiLinks": "getWikiLinks(pWikiText) extract Double-Bracket [[...]] link in pWikiText",
        "convertMediaLink4WikiOnline": "convertMediaLink4WikiOnline(pWikiText,pMediaArray) converts Media Links to WikiMedia Commons \nto a remote link for local files"
    },
    "MethodAccess": {
        "parse": "public",
        "deleteCR": "public",
        "headers": "public",
        "horizontalRule": "public",
        "inlineElement": "public",
        "list": "public",
        "table": "public",
        "paragraph": "public",
        "math2jax": "public",
        "toc": "public",
        "convertWiki2Local": "public",
        "parseWiki4Media": "public",
        "createMediaWikiJSON": "public",
        "checkWikiJSON": "public",
        "getMediaSubDir": "public",
        "convertWikiMedia2File": "public",
        "convertWikiMedia2URL": "public",
        "downloadWikiMedia": "public",
        "downloadMediaFile": "public",
        "convertMediaLink4Wiki": "public",
        "replaceString": "public",
        "convertWiki2Online": "public",
        "replaceWikiLinks": "public",
        "getWikiLinks": "public",
        "convertMediaLink4WikiOnline": "public"
    },
    "sClassList": "Wiki2HTML",
    "tMethodAccess": "public",
    "JSCC_version": "1"
}